name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'

permissions:
  contents: write
  packages: write
  pull-requests: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  GO_VERSION: '1.25.1'

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.rp.outputs.releases_created }}
      tag_name: ${{ steps.rp.outputs.tag_name }}
    steps:
    - uses: googleapis/release-please-action@v4
      id: rp
      with:
        token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        command: manifest
        config-file: release-please-config.json
        manifest-file: .release-please-manifest.json

  # Build and release
  release:
    name: Release
    needs: release-please
    if: needs.release-please.outputs.releases_created == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      id: import_gpg
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}

    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        install-only: true

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

  # Notify on release completion
  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && needs.release.result == 'success'

    steps:
    - name: Checkout to fetch tags
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Determine release info
      id: release_info
      run: |
        TAG_FROM_RP='${{ needs.release-please.outputs.tag_name }}'
        if [ -n "$TAG_FROM_RP" ]; then
          VERSION="$TAG_FROM_RP"
        else
          git fetch --tags --force
          VERSION=$(git tag -l 'v*' --sort=-v:refname | head -n1)
        fi
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        if [[ "$VERSION" == *"-"* ]]; then
          echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
        else
          echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Create success summary
      run: |
        echo "🎉 Release ${{ steps.release_info.outputs.version }} completed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.release_info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pre-release**: ${{ steps.release_info.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: registry.terraform.io/kbrockhoff/context" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Verify release is available in Terraform Registry" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Test provider with example configurations" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Update dependent projects if needed" >> $GITHUB_STEP_SUMMARY

  # Handle release failure
  failure-notification:
    name: Release Failure Notification
    runs-on: ubuntu-latest
    needs: [release]
    if: failure()

    steps:
    - name: Create failure summary
      run: |
        echo "❌ Release failed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Failure Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release**: ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the job logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify GPG signing configuration" >> $GITHUB_STEP_SUMMARY
        echo "3. Ensure all tests pass before tagging" >> $GITHUB_STEP_SUMMARY
        echo "4. Check GoReleaser configuration" >> $GITHUB_STEP_SUMMARY
