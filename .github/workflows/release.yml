name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.21'

jobs:
  # Pre-release validation
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race ./internal/...

    - name: Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Validate tag format
      run: |
        if [[ ! "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid tag format: ${{ github.ref }}"
          echo "Expected format: v1.0.0 or v1.0.0-alpha"
          exit 1
        fi
        echo "✅ Valid tag format: ${{ github.ref }}"

  # Build and release
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      id: import_gpg
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}

    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        install-only: true

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

  # Post-release documentation update
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install tfplugindocs
      run: go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest

    - name: Generate documentation
      run: tfplugindocs generate

    - name: Update version in README
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        sed -i "s/version = \"[^\"]*\"/version = \"${VERSION#v}\"/g" README.md

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/ README.md
        if git diff --staged --quiet; then
          echo "No documentation changes to commit"
        else
          git commit -m "docs: update for release ${GITHUB_REF#refs/tags/} [skip ci]"
          git push origin main
        fi

  # Notify on release completion
  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [release, update-docs]
    if: always() && needs.release.result == 'success'

    steps:
    - name: Get release info
      id: release_info
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        if [[ "$VERSION" == *"-"* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Create success summary
      run: |
        echo "🎉 Release ${{ steps.release_info.outputs.version }} completed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.release_info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pre-release**: ${{ steps.release_info.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: registry.terraform.io/kbrockhoff/context" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Verify release is available in Terraform Registry" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Test provider with example configurations" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Update dependent projects if needed" >> $GITHUB_STEP_SUMMARY

  # Handle release failure
  failure-notification:
    name: Release Failure Notification
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: failure()

    steps:
    - name: Create failure summary
      run: |
        echo "❌ Release failed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Failure Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation**: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release**: ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the job logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify GPG signing configuration" >> $GITHUB_STEP_SUMMARY
        echo "3. Ensure all tests pass before tagging" >> $GITHUB_STEP_SUMMARY
        echo "4. Check GoReleaser configuration" >> $GITHUB_STEP_SUMMARY